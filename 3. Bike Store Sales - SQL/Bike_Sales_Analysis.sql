/* 
 * Bike Store Sales Data Exploration
 * Platform Used: Mysql
 * 
 * Contents
 * 1. Data Exploration
 * 2. Sales Analysis
 * 3. Time-Based Analysis
 * 4. Customer Analysis
 * 5. Employee and Store Analysis
 */




/*
 1. Data Exploration
 
- Check all the datasets for this project
- List all the brands and categories available in the bike store.
- Check missing contact informations
 */


-- Check datasets' structures
SELECT * FROM brands;
SELECT * FROM categories;
SELECT * FROM customers c ;
SELECT * FROM order_items oi ;
SELECT * FROM orders;
SELECT * FROM products p ;
SELECT * FROM staffs;
SELECT * FROM stocks s ;
SELECT * FROM stores;


-- Brands and categories
SELECT b.brand_name
FROM brands b, categories c

SELECT category_name
FROM categories;


-- Customers whose contact information is missing
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.phone
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
WHERE 
    (c.email IS NULL OR c.email = '')
    AND (c.phone IS NULL OR c.phone = '')




/*
2. Sales Analysis:

- Calculate the total number of orders placed.
- Find the total revenue generated by the bike store.
- Determine the average sale amount per order.
- List the top 5 best-selling products by quantity sold.
- Identify which brand has the most products sold.
- Determine the revenue generated by each categories
*/

    
-- Total number of orders
SELECT COUNT(DISTINCT order_id) as `Number of orders`
FROM orders;


-- Total revenue
SELECT ROUND(SUM(list_price * (1-discount) * quantity)) as `Total Revenue`
FROM order_items oi ;


-- Average sale amount per order
SELECT ROUND(AVG(sale)) AS `Average Sale Amount Per Order`
FROM (
	SELECT order_id, SUM(list_price * quantity) as sale
	FROM order_items oi
	GROUP BY order_id
) as OrderTotals


-- Top 5 best-selling products by quantity sold
SELECT p.product_id, p.product_name, COUNT(p.product_id) as `Quantity`
FROM order_items oi
JOIN products p ON p.product_id = oi.product_id
GROUP BY p.product_id , p.product_name
ORDER BY `Quantity` DESC LIMIT 5;


-- Brand with the most products sold
SELECT b.brand_name, ROUND(SUM(oi.list_price * (1-oi.discount) * oi.quantity)) as `Revenue`
FROM order_items oi 
JOIN products p ON oi.product_id = p.product_id
JOIN brands b  ON p.brand_id = b.brand_id 
GROUP BY b.brand_name 
ORDER BY `Revenue` DESC;



-- Revenue generated by each categories
SELECT c.category_name, ROUND(SUM((oi.list_price - oi.discount) * oi.quantity)) AS `Category Revenue`
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id 
JOIN categories c ON p.category_id = c.category_id 
GROUP BY c.category_name
ORDER BY `Category Revenue` DESC;




/*
3. Time-Based Analysis

 - Calculate monthly sales revenue in 2016
 - Find out which month had the highest number of orders.
 - Identify seasonal trends in bike sales
*/

-- 2016 Monthly sales revenue
SELECT YEAR (o.order_date) as `YEAR`, MONTH(o.order_date) as `MONTH`, ROUND(SUM(oi.list_price)) as `Monthly Sales`
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
WHERE YEAR(o.order_date) = 2016
GROUP BY `YEAR`, `MONTH`
ORDER BY `Monthly Sales` DESC;


-- Month with the number of orders
SELECT  MONTH(order_date) as `MONTH`, COUNT(order_id) as `Quantity` 
FROM orders o 
GROUP BY `MONTH`
ORDER BY `Quantity` DESC;


-- Seasonal Trend
SELECT 
	YEAR(o.order_date) as `YEAR`,
	CASE
		WHEN MONTH(o.order_date) IN (3,4,5) THEN 'Spring'
		WHEN MONTH(o.order_date) IN (6,7,8) THEN 'SUMMER'
		WHEN MONTH(o.order_date) IN (9,10,11) THEN 'FALL'
		WHEN MONTH(o.order_date) IN (12,1,2) THEN 'WINTER'
	END as `Season`,
	SUM(oi.list_price) as `Seasonal Sales`
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
GROUP BY `YEAR`, `Season`
ORDER BY 
	`YEAR`,
	CASE `Season`
		WHEN 'Spring' THEN 1
		WHEN 'Summer' THEN 2
		WHEN 'Fall' THEN 3
		WHEN 'Winter' THEN 4
	END;
	



/*
 4. Customers Analysis
 
 - Display the total number of customers in the database.
 - Retrieve a list of customers along with the number of orders they have placed.
 - Determine the top 3 customers by total spend.
 - Identify customers who have not made a purchase in the 12 months.
 - Find all customers who have spent over a specific amount in total.
 - Perform cohort analysis to understand the behavior of customers over time. 
 */


-- Total number of customers
SELECT COUNT(DISTINCT customer_id)
FROM customers c;


-- Customers with the number of orders
SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) as `number of orders`
FROM customers c 
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY `number of orders` DESC;


-- Top 3 customers by total spend.
SELECT c.customer_id, c.first_name, c.last_name, ROUND(SUM(oi.list_price * (1-oi.discount) * oi.quantity)) as `Total Spend` 
FROM order_items oi 
JOIN orders o ON oi.order_id  = o.order_id 
JOIN customers c ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY `Total Spend` DESC LIMIT 3;


-- Customers who have not made a purchase in the 12 months
SELECT c.customer_id, c.first_name , c.last_name 
FROM customers c
LEFT JOIN 
    (SELECT customer_id FROM orders WHERE order_date >= (SELECT MAX(order_date) FROM orders) - INTERVAL 12 MONTH) o 
    ON c.customer_id = o.customer_id
WHERE o.customer_id IS NULL;


-- Customers who have spent over a 20000 in total
SELECT
    c.customer_id,
    c.last_name ,
    c.first_name,
    ROUND(SUM(oi.list_price * (1-oi.discount) * oi.quantity)) AS total_spent
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
JOIN 
	order_items oi ON oi.order_id =o.order_id 
GROUP BY
    c.customer_id, c.last_name, c.first_name 
HAVING
    SUM(oi.list_price * (1-oi.discount) * oi.quantity) > 20000;


   
-- Cohort Analysis Based on the first order date

-- Drop the temporary table if it exists
DROP TEMPORARY TABLE IF EXISTS CustomerCohorts;


-- Create a temporary table to store the first purchase date for each customer
CREATE TEMPORARY TABLE CustomerCohorts AS (
    SELECT
        customer_id,
        DATE_FORMAT(MIN(order_date), '%Y-%m') as cohort
    FROM
        orders
    WHERE
        order_date IS NOT NULL
    GROUP BY
        customer_id
);


-- Join the orders with the cohorts and calculate revenue by cohort and period
SELECT
    cc.cohort,
    DATE_FORMAT(o.order_date, '%Y-%m') as order_period,
    COUNT(DISTINCT o.customer_id) AS number_of_customers,
    SUM(IFNULL(oi.list_price , 0)) AS revenue
FROM
    orders o
JOIN
    CustomerCohorts cc ON o.customer_id = cc.customer_id
JOIN 
	order_items oi ON oi.order_id = o.order_id
WHERE
    o.order_date IS NOT NULL
GROUP BY
    cc.cohort,
    order_period
ORDER BY
    cc.cohort,
    order_period;
   


   
/*
 5. Employee and Store Analysis
 
 - Calculate the total sales generated by each staff member.
 - Find out which store has the highest stock quantity.
 - Find the staff member with the highest number of sales transactions.
 - Determine the average number of orders processed by staff each day.
*/

   
-- Total sales generated by each staffs
SELECT s.staff_id, s.first_name, s.last_name, COALESCE(ROUND(SUM(oi.list_price * (1 - oi.discount) * oi.quantity)), 0) as `Sales`
FROM staffs s
LEFT JOIN orders o ON s.staff_id = o.staff_id 
LEFT JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.staff_id , s.first_name , s.last_name 
ORDER BY `Sales` DESC;
   

-- Store with the highest stock quantity.
SELECT s.store_id, s2.store_name, SUM(s.quantity) as `Stock Quantity` 
FROM stocks s
JOIN stores s2 ON s.store_id = s2.store_id 
GROUP BY s.store_id, s2.store_name LIMIT 1;


 -- Staff member with the highest number of sales transactions
SELECT o.staff_id, s.first_name, s.last_name, COUNT(o.order_id) as `Quantity`
FROM orders o
JOIN staffs s  ON o.staff_id = s.staff_id 
GROUP BY o.staff_id, s.first_name, s.last_name
ORDER BY `Quantity` DESC LIMIT 1;


-- Average number of orders processed by staff each day
SELECT  AVG(`Orders per day`) AS `Average Orders per Day`
FROM
	(SELECT o.staff_id, COUNT(DISTINCT o.order_id) / COUNT(DISTINCT o.order_date) as `Orders per Day`
	FROM orders o
	GROUP BY o.staff_id) as so
	
	
	
	
	
	
	